@page "/ToDoList/{listId}/Update/{itemId}"
@attribute [Authorize]

@using Lab4.Client.Services
@using Lab4.Shared.Domain
@using Microsoft.AspNetCore.Authorization

@inject NavigationManager Navigation
@inject ToDoListService ToDoListService
@inject ToDoListItemService ToDoListItemService

<div class="text-center">
    <h1 class="display-4">Редактирование дела в списке - @listName</h1>
    <EditForm Model="item">
        <p>
            <label for="Name"><b>Название:</b></label><br>
            <InputText name="Name" id="Name" class="w-100" @bind-Value="@item.Name" required />
        </p>
        <p>
            <label for="Done"><b>Выполнено?:</b></label><br>
            <InputCheckbox name="Done" id="Done" @bind-Value="@item.Done" />
        </p>
        <input type="submit" class="btn btn-success" value="Изменить" @onclick="() => Update(item)">
        <a class="btn btn-danger" href="/ToDoList/@listId">Назад</a>
    </EditForm>
</div>

@code {
    [Parameter]
    public string listId { get; set; }
    [Parameter]
    public string itemId { get; set; }
    private string listName { get; set; }
    private ToDoListItemModel item { get; set; }
        = new ToDoListItemModel();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            item = await ToDoListItemService.GetItemById(itemId);
            listName = await ToDoListService.GetNameOfList(listId);
        }
        catch (HttpRequestException)
        {
            BackToItems();
        }
    }

    private async Task Update(ToDoListItemModel item)
    {
        if (!String.IsNullOrWhiteSpace(item.Name))
        {
            await ToDoListItemService.UpdateItem(item);
            BackToItems();
        }
    }

    private void BackToItems()
    {
        Navigation.NavigateTo($"/ToDoList/{listId}");
        return;
    }
}